import React from 'react';
import { render, screen, waitFor, fireEvent } from '@testing-library/react';
import { PDFViewerContainer } from '../../components/pdf/PDFViewerContainer';
import { PdfProvider } from '../../contexts/PdfContext';
import { UserProvider } from '../../contexts/UserContext';
import { AnnotationProvider } from '../../contexts/AnnotationContext';

// Mock requestIdleCallback
global.requestIdleCallback = jest.fn((callback) => {
  const deadline = { timeRemaining: () => 100 };
  setTimeout(() => callback(deadline), 100);
  return 1;
});

global.cancelIdleCallback = jest.fn();

// Mock the QR scanning utilities to avoid actual QR scanning
jest.mock('../../utils/QRCodeScanner', () => ({
  QRCodeScanner: jest.fn().mockImplementation(() => ({
    scanPage: jest.fn().mockResolvedValue([]),
    isQRCodeDetectionSupported: jest.fn().mockReturnValue(true)
  }))
}));

jest.mock('../../utils/PageContentExtractor', () => ({
  PageContentExtractor: jest.fn().mockImplementation(() => ({
    extractHeadings: jest.fn().mockResolvedValue([]),
    findBestHeadingForArea: jest.fn().mockReturnValue(null)
  }))
}));

jest.mock('../../utils/AutoCTAGenerator', () => ({
  AutoCTAGenerator: jest.fn().mockImplementation(() => ({
    createFromQRCode: jest.fn().mockReturnValue({
      id: 'test-cta',
      userId: 'test-user',
      documentId: 'test-doc',
      pageNumber: 1,
      url: 'http://test.com/test',
      label: 'Test CTA',
      coordinates: { x: 0, y: 0, width: 100, height: 30 },
      isAutoGenerated: true,
      qrCodeContent: 'test',
      autoGeneratedAt: new Date(),
      createdAt: new Date(),
      updatedAt: new Date()
    })
  }))
}));

// Mock PDF.js to avoid PDF rendering issues
jest.mock('react-pdf', () => ({
  Document: ({ children, onLoadSuccess }: any) => {
    React.useEffect(() => {
      setTimeout(() => {
        onLoadSuccess?.({ numPages: 3 });
      }, 100);
    }, [onLoadSuccess]);
    return <div data-testid="pdf-document">{children}</div>;
  },
  Page: ({ pageNumber }: any) => (
    <div data-testid={`pdf-page-${pageNumber}`} data-page-number={pageNumber}>
      <canvas width="800" height="600" />
    </div>
  ),
  pdfjs: {
    GlobalWorkerOptions: { workerSrc: '' },
    version: '3.0.0'
  }
}));

describe('QR Code Scanning Workflow Integration', () => {
  const renderPDFViewer = () => {
    return render(
      <UserProvider>
        <PdfProvider>
          <AnnotationProvider>
            <PDFViewerContainer />
          </AnnotationProvider>
        </PdfProvider>
      </UserProvider>
    );
  };

  const createMockPDFFile = () => {
    const content = new Uint8Array([37, 80, 68, 70]); // PDF header
    return new File([content], 'test.pdf', { type: 'application/pdf' });
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('should render PDF viewer with QR scanning integration', async () => {
    const { container } = renderPDFViewer();

    // Upload a PDF file
    const fileInput = container.querySelector('input[type="file"]') as HTMLInputElement;
    const mockFile = createMockPDFFile();

    fireEvent.change(fileInput, { target: { files: [mockFile] } });

    // Wait for PDF to load
    await waitFor(() => {
      expect(screen.getByTestId('pdf-document')).toBeInTheDocument();
    });

    // The PDF viewer should be rendered successfully
    expect(screen.getByTestId('pdf-document')).toBeInTheDocument();
  });

  test('should show QR scanning UI when PDF is loaded', async () => {
    const { container } = renderPDFViewer();

    // Upload a PDF file
    const fileInput = container.querySelector('input[type="file"]') as HTMLInputElement;
    const mockFile = createMockPDFFile();

    fireEvent.change(fileInput, { target: { files: [mockFile] } });

    // Wait for PDF to load
    await waitFor(() => {
      expect(screen.getByTestId('pdf-document')).toBeInTheDocument();
    });

    // Wait a bit for QR scanning to potentially start
    await new Promise(resolve => setTimeout(resolve, 1000));

    // The PDF viewer should be rendered without errors
    expect(screen.getByTestId('pdf-document')).toBeInTheDocument();
  });

  test('should handle PDF upload workflow without errors', async () => {
    const { container } = renderPDFViewer();

    // Verify initial state - no PDF loaded
    expect(screen.queryByTestId('pdf-document')).not.toBeInTheDocument();

    // Upload a PDF file
    const fileInput = container.querySelector('input[type="file"]') as HTMLInputElement;
    expect(fileInput).toBeInTheDocument();

    const mockFile = createMockPDFFile();
    fireEvent.change(fileInput, { target: { files: [mockFile] } });

    // Wait for PDF to load and render
    await waitFor(() => {
      expect(screen.getByTestId('pdf-document')).toBeInTheDocument();
    }, { timeout: 3000 });

    // Verify PDF is displayed
    expect(screen.getByTestId('pdf-document')).toBeInTheDocument();
  });

  test('should integrate QR scanning with PDF rendering', async () => {
    const { container } = renderPDFViewer();

    // Upload a PDF file
    const fileInput = container.querySelector('input[type="file"]') as HTMLInputElement;
    const mockFile = createMockPDFFile();

    fireEvent.change(fileInput, { target: { files: [mockFile] } });

    // Wait for PDF to load
    await waitFor(() => {
      expect(screen.getByTestId('pdf-document')).toBeInTheDocument();
    });

    // Wait for potential QR scanning to start (background process)
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Verify the PDF is still displayed (QR scanning shouldn't interfere)
    expect(screen.getByTestId('pdf-document')).toBeInTheDocument();
    
    // Verify no errors occurred during the integration
    expect(screen.queryByText(/error/i)).not.toBeInTheDocument();
  });

  test('should handle background QR scanning without blocking UI', async () => {
    const { container } = renderPDFViewer();

    // Upload a PDF file
    const fileInput = container.querySelector('input[type="file"]') as HTMLInputElement;
    const mockFile = createMockPDFFile();

    fireEvent.change(fileInput, { target: { files: [mockFile] } });

    // Wait for PDF to load
    await waitFor(() => {
      expect(screen.getByTestId('pdf-document')).toBeInTheDocument();
    });

    // Verify UI remains responsive during background scanning
    const annotationButton = screen.getByText(/Show.*Annotations/i);
    expect(annotationButton).toBeInTheDocument();
    
    // Click the annotation button to test UI responsiveness
    fireEvent.click(annotationButton);
    
    // UI should still be responsive
    expect(annotationButton).toBeInTheDocument();
  });

  test('should coordinate with react-pdf canvas rendering', async () => {
    const { container } = renderPDFViewer();

    // Upload a PDF file
    const fileInput = container.querySelector('input[type="file"]') as HTMLInputElement;
    const mockFile = createMockPDFFile();

    fireEvent.change(fileInput, { target: { files: [mockFile] } });

    // Wait for PDF to load and pages to render
    await waitFor(() => {
      expect(screen.getByTestId('pdf-document')).toBeInTheDocument();
    });

    // Wait for page elements to be created
    await waitFor(() => {
      const pageElement = container.querySelector('[data-page-number="1"]');
      expect(pageElement).toBeInTheDocument();
    });

    // Verify canvas elements are present for QR scanning
    const canvasElements = container.querySelectorAll('canvas');
    expect(canvasElements.length).toBeGreaterThan(0);

    // Verify page elements have the correct data attributes for QR scanning
    const pageElement = container.querySelector('[data-page-number="1"]');
    expect(pageElement).toHaveAttribute('data-page-number', '1');
  });
});