import { 
  validateAreaCoordinates, 
  validateRectangleCoordinates,
  validateCallToAction,
  createCallToAction,
  CallToAction
} from './annotation.types';

describe('Annotation Types', () => {
  describe('validateAreaCoordinates', () => {
    it('should validate valid area coordinates', () => {
      expect(validateAreaCoordinates({ x: 10, y: 20 })).toBe(true);
      expect(validateAreaCoordinates({ x: 0, y: 0 })).toBe(true);
    });

    it('should reject invalid area coordinates', () => {
      expect(validateAreaCoordinates({ x: -1, y: 20 })).toBe(false);
      expect(validateAreaCoordinates({ x: 10, y: -1 })).toBe(false);
      expect(validateAreaCoordinates(null)).toBe(false);
      expect(validateAreaCoordinates({})).toBe(false);
      expect(validateAreaCoordinates({ x: 'invalid', y: 20 })).toBe(false);
    });
  });

  describe('validateCallToAction', () => {
    const validBaseAnnotation = {
      id: 'test-id',
      userId: 'user-123',
      documentId: 'doc-456',
      pageNumber: 1,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    const validCoordinates = {
      x: 10,
      y: 20,
      width: 100,
      height: 50
    };

    const validCTA = {
      ...validBaseAnnotation,
      url: 'https://example.com',
      label: 'Test Label',
      coordinates: validCoordinates
    };

    it('should validate basic CallToAction', () => {
      expect(validateCallToAction(validCTA)).toBe(true);
    });

    it('should validate CallToAction with auto-generated fields', () => {
      const autoGeneratedCTA = {
        ...validCTA,
        isAutoGenerated: true,
        qrCodeContent: 'test-qr-content',
        autoGeneratedAt: new Date()
      };
      expect(validateCallToAction(autoGeneratedCTA)).toBe(true);
    });

    it('should validate CallToAction with optional auto-generated fields as undefined', () => {
      const ctaWithUndefinedFields = {
        ...validCTA,
        isAutoGenerated: undefined,
        qrCodeContent: undefined,
        autoGeneratedAt: undefined
      };
      expect(validateCallToAction(ctaWithUndefinedFields)).toBe(true);
    });

    it('should validate CallToAction with false isAutoGenerated', () => {
      const manualCTA = {
        ...validCTA,
        isAutoGenerated: false
      };
      expect(validateCallToAction(manualCTA)).toBe(true);
    });

    it('should reject CallToAction with invalid isAutoGenerated type', () => {
      const invalidCTA = {
        ...validCTA,
        isAutoGenerated: 'true' // string instead of boolean
      };
      expect(validateCallToAction(invalidCTA)).toBe(false);
    });

    it('should reject CallToAction with empty qrCodeContent', () => {
      const invalidCTA = {
        ...validCTA,
        qrCodeContent: ''
      };
      expect(validateCallToAction(invalidCTA)).toBe(false);
    });

    it('should reject CallToAction with whitespace-only qrCodeContent', () => {
      const invalidCTA = {
        ...validCTA,
        qrCodeContent: '   '
      };
      expect(validateCallToAction(invalidCTA)).toBe(false);
    });

    it('should reject CallToAction with invalid qrCodeContent type', () => {
      const invalidCTA = {
        ...validCTA,
        qrCodeContent: 123 // number instead of string
      };
      expect(validateCallToAction(invalidCTA)).toBe(false);
    });

    it('should reject CallToAction with invalid autoGeneratedAt type', () => {
      const invalidCTA = {
        ...validCTA,
        autoGeneratedAt: 'invalid-date'
      };
      expect(validateCallToAction(invalidCTA)).toBe(false);
    });

    it('should reject CallToAction with invalid Date for autoGeneratedAt', () => {
      const invalidCTA = {
        ...validCTA,
        autoGeneratedAt: new Date('invalid')
      };
      expect(validateCallToAction(invalidCTA)).toBe(false);
    });

    it('should reject CallToAction with invalid URL', () => {
      const invalidCTA = {
        ...validCTA,
        url: 'not-a-url'
      };
      expect(validateCallToAction(invalidCTA)).toBe(false);
    });

    it('should reject CallToAction with missing required fields', () => {
      const invalidCTA = {
        ...validCTA,
        label: ''
      };
      expect(validateCallToAction(invalidCTA)).toBe(false);
    });
  });

  describe('createCallToAction', () => {
    const validParams = {
      id: 'test-id',
      userId: 'user-123',
      documentId: 'doc-456',
      pageNumber: 1,
      url: 'https://example.com',
      label: 'Test Label',
      coordinates: { x: 10, y: 20, width: 100, height: 50 }
    };

    it('should create basic CallToAction', () => {
      const cta = createCallToAction(
        validParams.id,
        validParams.userId,
        validParams.documentId,
        validParams.pageNumber,
        validParams.url,
        validParams.label,
        validParams.coordinates
      );

      expect(cta.id).toBe(validParams.id);
      expect(cta.userId).toBe(validParams.userId);
      expect(cta.documentId).toBe(validParams.documentId);
      expect(cta.pageNumber).toBe(validParams.pageNumber);
      expect(cta.url).toBe(validParams.url);
      expect(cta.label).toBe(validParams.label);
      expect(cta.coordinates).toEqual(validParams.coordinates);
      expect(cta.createdAt).toBeInstanceOf(Date);
      expect(cta.updatedAt).toBeInstanceOf(Date);
      expect(cta.isAutoGenerated).toBeUndefined();
      expect(cta.qrCodeContent).toBeUndefined();
      expect(cta.autoGeneratedAt).toBeUndefined();
    });

    it('should create auto-generated CallToAction', () => {
      const qrContent = 'test-qr-content';
      const cta = createCallToAction(
        validParams.id,
        validParams.userId,
        validParams.documentId,
        validParams.pageNumber,
        validParams.url,
        validParams.label,
        validParams.coordinates,
        true,
        qrContent
      );

      expect(cta.isAutoGenerated).toBe(true);
      expect(cta.qrCodeContent).toBe(qrContent);
      expect(cta.autoGeneratedAt).toBeInstanceOf(Date);
      expect(cta.autoGeneratedAt).toEqual(cta.createdAt);
    });

    it('should create manual CallToAction with explicit false flag', () => {
      const cta = createCallToAction(
        validParams.id,
        validParams.userId,
        validParams.documentId,
        validParams.pageNumber,
        validParams.url,
        validParams.label,
        validParams.coordinates,
        false
      );

      expect(cta.isAutoGenerated).toBe(false);
      expect(cta.qrCodeContent).toBeUndefined();
      expect(cta.autoGeneratedAt).toBeUndefined();
    });

    it('should handle QR content without auto-generated flag', () => {
      const qrContent = 'test-qr-content';
      const cta = createCallToAction(
        validParams.id,
        validParams.userId,
        validParams.documentId,
        validParams.pageNumber,
        validParams.url,
        validParams.label,
        validParams.coordinates,
        undefined,
        qrContent
      );

      expect(cta.isAutoGenerated).toBeUndefined();
      expect(cta.qrCodeContent).toBe(qrContent);
      expect(cta.autoGeneratedAt).toBeUndefined();
    });

    it('should trim whitespace from QR content', () => {
      const qrContent = '  test-qr-content  ';
      const cta = createCallToAction(
        validParams.id,
        validParams.userId,
        validParams.documentId,
        validParams.pageNumber,
        validParams.url,
        validParams.label,
        validParams.coordinates,
        true,
        qrContent
      );

      expect(cta.qrCodeContent).toBe('test-qr-content');
    });

    it('should ignore empty QR content', () => {
      const cta = createCallToAction(
        validParams.id,
        validParams.userId,
        validParams.documentId,
        validParams.pageNumber,
        validParams.url,
        validParams.label,
        validParams.coordinates,
        true,
        ''
      );

      expect(cta.qrCodeContent).toBeUndefined();
    });

    it('should ignore whitespace-only QR content', () => {
      const cta = createCallToAction(
        validParams.id,
        validParams.userId,
        validParams.documentId,
        validParams.pageNumber,
        validParams.url,
        validParams.label,
        validParams.coordinates,
        true,
        '   '
      );

      expect(cta.qrCodeContent).toBeUndefined();
    });

    it('should throw error for invalid data', () => {
      expect(() => {
        createCallToAction(
          '',
          validParams.userId,
          validParams.documentId,
          validParams.pageNumber,
          validParams.url,
          validParams.label,
          validParams.coordinates
        );
      }).toThrow('Invalid call-to-action data provided');
    });
  });
});