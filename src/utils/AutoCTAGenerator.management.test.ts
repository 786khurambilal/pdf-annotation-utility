import { AutoCTAGenerator } from './AutoCTAGenerator';
import { AnnotationManager } from './AnnotationManager';
import { QRCodeScanResult } from './QRCodeScanner';
import { PageHeading } from './PageContentExtractor';

// Mock AnnotationManager
jest.mock('./AnnotationManager');

describe('AutoCTAGenerator - Management Features', () => {
  let generator: AutoCTAGenerator;
  let mockAnnotationManager: jest.Mocked<AnnotationManager>;

  const mockQRResult: QRCodeScanResult = {
    content: 'sample-qr-content',
    coordinates: { x: 100, y: 100, width: 50, height: 50 },
    confidence: 0.95
  };

  const mockHeadings: PageHeading[] = [
    {
      text: 'Sample Heading',
      level: 1,
      coordinates: { x: 90, y: 80, width: 200, height: 30 }
    }
  ];

  beforeEach(() => {
    generator = new AutoCTAGenerator();
    mockAnnotationManager = {
      hasAutoGeneratedCTA: jest.fn(),
      getAutoGeneratedCTA: jest.fn(),
    } as any;
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('Duplication Prevention', () => {
    it('should create CTA when no duplicate exists', () => {
      mockAnnotationManager.hasAutoGeneratedCTA.mockReturnValue(false);

      const result = generator.createFromQRCode(
        mockQRResult,
        1,
        'Sample Heading',
        'user-1',
        'doc-1',
        mockAnnotationManager
      );

      expect(result).not.toBeNull();
      expect(result?.isAutoGenerated).toBe(true);
      expect(result?.qrCodeContent).toBe('sample-qr-content');
      expect(result?.label).toBe('Sample Heading');
      expect(mockAnnotationManager.hasAutoGeneratedCTA).toHaveBeenCalledWith(
        'user-1',
        'doc-1',
        'sample-qr-content',
        1
      );
    });

    it('should not create CTA when duplicate exists', () => {
      mockAnnotationManager.hasAutoGeneratedCTA.mockReturnValue(true);

      const result = generator.createFromQRCode(
        mockQRResult,
        1,
        'Sample Heading',
        'user-1',
        'doc-1',
        mockAnnotationManager
      );

      expect(result).toBeNull();
      expect(mockAnnotationManager.hasAutoGeneratedCTA).toHaveBeenCalledWith(
        'user-1',
        'doc-1',
        'sample-qr-content',
        1
      );
    });

    it('should create CTA when annotation manager is not provided', () => {
      const result = generator.createFromQRCode(
        mockQRResult,
        1,
        'Sample Heading',
        'user-1',
        'doc-1'
      );

      expect(result).not.toBeNull();
      expect(result?.isAutoGenerated).toBe(true);
    });

    it('should handle multiple QR codes with duplication checking', () => {
      const qrResults: QRCodeScanResult[] = [
        {
          content: 'qr-1',
          coordinates: { x: 100, y: 100, width: 50, height: 50 },
          confidence: 0.95
        },
        {
          content: 'qr-2',
          coordinates: { x: 200, y: 200, width: 50, height: 50 },
          confidence: 0.90
        },
        {
          content: 'qr-3',
          coordinates: { x: 300, y: 300, width: 50, height: 50 },
          confidence: 0.85
        }
      ];

      // Mock that qr-2 already exists
      mockAnnotationManager.hasAutoGeneratedCTA.mockImplementation((userId, docId, content) => {
        return content === 'qr-2';
      });

      const findBestHeading = jest.fn().mockReturnValue('Test Heading');

      const results = generator.createMultipleFromQRCodes(
        qrResults,
        1,
        mockHeadings,
        'user-1',
        'doc-1',
        findBestHeading,
        mockAnnotationManager
      );

      expect(results).toHaveLength(2); // qr-1 and qr-3, excluding qr-2
      expect(results[0].qrCodeContent).toBe('qr-1');
      expect(results[1].qrCodeContent).toBe('qr-3');
      expect(mockAnnotationManager.hasAutoGeneratedCTA).toHaveBeenCalledTimes(3);
    });
  });

  describe('URL Generation', () => {
    it('should use complete URL when QR content is a valid URL', () => {
      const urlQRResult: QRCodeScanResult = {
        content: 'https://example.com/page',
        coordinates: { x: 100, y: 100, width: 50, height: 50 },
        confidence: 0.95
      };

      const result = generator.createFromQRCode(
        urlQRResult,
        1,
        'Sample Heading',
        'user-1',
        'doc-1'
      );

      expect(result?.url).toBe('https://example.com/page');
    });

    it('should append non-URL content to base URL', () => {
      const textQRResult: QRCodeScanResult = {
        content: 'product-123',
        coordinates: { x: 100, y: 100, width: 50, height: 50 },
        confidence: 0.95
      };

      const result = generator.createFromQRCode(
        textQRResult,
        1,
        'Sample Heading',
        'user-1',
        'doc-1'
      );

      expect(result?.url).toBe('http://test.com?qr=product-123');
    });

    it('should handle special characters in QR content', () => {
      const specialQRResult: QRCodeScanResult = {
        content: 'product with spaces & symbols!',
        coordinates: { x: 100, y: 100, width: 50, height: 50 },
        confidence: 0.95
      };

      const result = generator.createFromQRCode(
        specialQRResult,
        1,
        'Sample Heading',
        'user-1',
        'doc-1'
      );

      expect(result?.url).toBe('http://test.com?qr=product%20with%20spaces%20%26%20symbols!');
    });
  });

  describe('Title Generation', () => {
    it('should use page heading when available', () => {
      const result = generator.createFromQRCode(
        mockQRResult,
        1,
        'Custom Page Heading',
        'user-1',
        'doc-1'
      );

      expect(result?.label).toBe('Custom Page Heading');
    });

    it('should use fallback title when no heading provided', () => {
      const result = generator.createFromQRCode(
        mockQRResult,
        3,
        null,
        'user-1',
        'doc-1'
      );

      expect(result?.label).toBe('QR Code Link - Page 3');
    });

    it('should truncate long headings', () => {
      const longHeading = 'This is a very long heading that exceeds the maximum character limit for CTA labels';
      
      const result = generator.createFromQRCode(
        mockQRResult,
        1,
        longHeading,
        'user-1',
        'doc-1'
      );

      expect(result?.label.length).toBeLessThanOrEqual(50); // Should be truncated to max length
      expect(result?.label).toContain('...');
    });

    it('should truncate at word boundary when possible', () => {
      const longHeading = 'This is a moderately long heading that should be truncated at word boundary';
      
      const result = generator.createFromQRCode(
        mockQRResult,
        1,
        longHeading,
        'user-1',
        'doc-1'
      );

      expect(result?.label.length).toBeLessThanOrEqual(50);
      expect(result?.label).toContain('...');
      // Check that it was truncated (original is longer than result)
      expect(result?.label.length).toBeLessThan(longHeading.length);
    });
  });

  describe('CTA Properties', () => {
    it('should set correct auto-generation properties', () => {
      const result = generator.createFromQRCode(
        mockQRResult,
        2,
        'Test Heading',
        'user-1',
        'doc-1'
      );

      expect(result?.isAutoGenerated).toBe(true);
      expect(result?.qrCodeContent).toBe('sample-qr-content');
      expect(result?.autoGeneratedAt).toBeInstanceOf(Date);
      expect(result?.pageNumber).toBe(2);
      expect(result?.userId).toBe('user-1');
      expect(result?.documentId).toBe('doc-1');
    });

    it('should generate consistent IDs for same QR content and position', () => {
      const result1 = generator.createFromQRCode(
        mockQRResult,
        1,
        'Test Heading',
        'user-1',
        'doc-1'
      );

      const result2 = generator.createFromQRCode(
        mockQRResult,
        1,
        'Test Heading',
        'user-1',
        'doc-1'
      );

      expect(result1?.id).toBe(result2?.id);
    });

    it('should generate different IDs for different QR content', () => {
      const qrResult2: QRCodeScanResult = {
        content: 'different-content',
        coordinates: { x: 100, y: 100, width: 50, height: 50 },
        confidence: 0.95
      };

      const result1 = generator.createFromQRCode(
        mockQRResult,
        1,
        'Test Heading',
        'user-1',
        'doc-1'
      );

      const result2 = generator.createFromQRCode(
        qrResult2,
        1,
        'Test Heading',
        'user-1',
        'doc-1'
      );

      expect(result1?.id).not.toBe(result2?.id);
    });

    it('should generate different IDs for different positions', () => {
      const qrResult2: QRCodeScanResult = {
        content: 'sample-qr-content',
        coordinates: { x: 200, y: 200, width: 50, height: 50 },
        confidence: 0.95
      };

      const result1 = generator.createFromQRCode(
        mockQRResult,
        1,
        'Test Heading',
        'user-1',
        'doc-1'
      );

      const result2 = generator.createFromQRCode(
        qrResult2,
        1,
        'Test Heading',
        'user-1',
        'doc-1'
      );

      expect(result1?.id).not.toBe(result2?.id);
    });
  });

  describe('Configuration', () => {
    it('should use custom base URL', () => {
      const customGenerator = new AutoCTAGenerator({
        baseUrl: 'https://custom.com/'
      });

      const result = customGenerator.createFromQRCode(
        mockQRResult,
        1,
        'Test Heading',
        'user-1',
        'doc-1'
      );

      expect(result?.url).toBe('https://custom.com?qr=sample-qr-content');
    });

    it('should use custom title template', () => {
      const customGenerator = new AutoCTAGenerator({
        defaultTitleTemplate: 'Auto Link - Page {pageNumber}'
      });

      const result = customGenerator.createFromQRCode(
        mockQRResult,
        5,
        null,
        'user-1',
        'doc-1'
      );

      expect(result?.label).toBe('Auto Link - Page 5');
    });

    it('should use custom max title length', () => {
      const customGenerator = new AutoCTAGenerator({
        maxTitleLength: 20
      });

      const longHeading = 'This is a very long heading';
      const result = customGenerator.createFromQRCode(
        mockQRResult,
        1,
        longHeading,
        'user-1',
        'doc-1'
      );

      expect(result?.label.length).toBeLessThanOrEqual(20);
      expect(result?.label).toContain('...');
    });
  });
});