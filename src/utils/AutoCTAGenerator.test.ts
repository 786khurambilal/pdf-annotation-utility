import { AutoCTAGenerator, AutoCTAConfig } from './AutoCTAGenerator';
import { QRCodeScanResult } from './QRCodeScanner';
import { PageHeading } from './PageContentExtractor';
import { CallToAction, RectangleCoordinates } from '../types/annotation.types';

describe('AutoCTAGenerator', () => {
  let generator: AutoCTAGenerator;
  const mockUserId = 'user123';
  const mockDocumentId = 'doc456';
  const mockPageNumber = 1;

  beforeEach(() => {
    generator = new AutoCTAGenerator();
  });

  describe('constructor', () => {
    it('should use default configuration when no config provided', () => {
      const config = generator.getConfig();
      expect(config.baseUrl).toBe('http://test.com/');
      expect(config.maxTitleLength).toBe(50);
      expect(config.defaultTitleTemplate).toBe('QR Code Link - Page {pageNumber}');
    });

    it('should merge custom configuration with defaults', () => {
      const customConfig: Partial<AutoCTAConfig> = {
        baseUrl: 'https://custom.com/',
        maxTitleLength: 30
      };
      const customGenerator = new AutoCTAGenerator(customConfig);
      const config = customGenerator.getConfig();
      
      expect(config.baseUrl).toBe('https://custom.com/');
      expect(config.maxTitleLength).toBe(30);
      expect(config.defaultTitleTemplate).toBe('QR Code Link - Page {pageNumber}'); // Should keep default
    });
  });

  describe('createFromQRCode', () => {
    const mockCoordinates: RectangleCoordinates = {
      x: 100,
      y: 200,
      width: 50,
      height: 50
    };

    it('should create CTA with URL content from QR code', () => {
      const qrResult: QRCodeScanResult = {
        content: 'https://example.com',
        coordinates: mockCoordinates,
        confidence: 0.9
      };

      const cta = generator.createFromQRCode(
        qrResult,
        mockPageNumber,
        'Test Heading',
        mockUserId,
        mockDocumentId
      );

      expect(cta.url).toBe('https://example.com');
      expect(cta.label).toBe('Test Heading');
      expect(cta.isAutoGenerated).toBe(true);
      expect(cta.qrCodeContent).toBe('https://example.com');
      expect(cta.autoGeneratedAt).toBeInstanceOf(Date);
      expect(cta.userId).toBe(mockUserId);
      expect(cta.documentId).toBe(mockDocumentId);
      expect(cta.pageNumber).toBe(mockPageNumber);
      expect(cta.coordinates).toEqual(mockCoordinates);
    });

    it('should create CTA with base URL + parameter for non-URL content', () => {
      const qrResult: QRCodeScanResult = {
        content: 'product123',
        coordinates: mockCoordinates,
        confidence: 0.8
      };

      const cta = generator.createFromQRCode(
        qrResult,
        mockPageNumber,
        'Product Info',
        mockUserId,
        mockDocumentId
      );

      expect(cta.url).toBe('http://test.com?qr=product123');
      expect(cta.label).toBe('Product Info');
      expect(cta.qrCodeContent).toBe('product123');
    });

    it('should handle special characters in QR content by URL encoding', () => {
      const qrResult: QRCodeScanResult = {
        content: 'special chars: #&=?',
        coordinates: mockCoordinates,
        confidence: 0.7
      };

      const cta = generator.createFromQRCode(
        qrResult,
        mockPageNumber,
        null,
        mockUserId,
        mockDocumentId
      );

      expect(cta.url).toBe('http://test.com?qr=special%20chars%3A%20%23%26%3D%3F');
    });

    it('should use fallback title when no page heading provided', () => {
      const qrResult: QRCodeScanResult = {
        content: 'test content',
        coordinates: mockCoordinates,
        confidence: 0.6
      };

      const cta = generator.createFromQRCode(
        qrResult,
        3,
        null,
        mockUserId,
        mockDocumentId
      );

      expect(cta.label).toBe('QR Code Link - Page 3');
    });

    it('should use fallback title when empty heading provided', () => {
      const qrResult: QRCodeScanResult = {
        content: 'test content',
        coordinates: mockCoordinates,
        confidence: 0.6
      };

      const cta = generator.createFromQRCode(
        qrResult,
        2,
        '   ', // Empty/whitespace heading
        mockUserId,
        mockDocumentId
      );

      expect(cta.label).toBe('QR Code Link - Page 2');
    });

    it('should truncate long headings to max length', () => {
      const longHeading = 'This is a very long heading that exceeds the maximum character limit and should be truncated';
      const qrResult: QRCodeScanResult = {
        content: 'test',
        coordinates: mockCoordinates,
        confidence: 0.5
      };

      const cta = generator.createFromQRCode(
        qrResult,
        mockPageNumber,
        longHeading,
        mockUserId,
        mockDocumentId
      );

      expect(cta.label.length).toBeLessThanOrEqual(50);
      expect(cta.label).toContain('...');
    });

    it('should handle base URL with trailing slash', () => {
      const customGenerator = new AutoCTAGenerator({ baseUrl: 'https://test.com/' });
      const qrResult: QRCodeScanResult = {
        content: 'test123',
        coordinates: mockCoordinates,
        confidence: 0.8
      };

      const cta = customGenerator.createFromQRCode(
        qrResult,
        mockPageNumber,
        'Test',
        mockUserId,
        mockDocumentId
      );

      expect(cta.url).toBe('https://test.com?qr=test123');
    });

    it('should handle base URL without trailing slash', () => {
      const customGenerator = new AutoCTAGenerator({ baseUrl: 'https://test.com' });
      const qrResult: QRCodeScanResult = {
        content: 'test123',
        coordinates: mockCoordinates,
        confidence: 0.8
      };

      const cta = customGenerator.createFromQRCode(
        qrResult,
        mockPageNumber,
        'Test',
        mockUserId,
        mockDocumentId
      );

      expect(cta.url).toBe('https://test.com?qr=test123');
    });

    it('should generate consistent IDs for same QR content and position', () => {
      const qrResult: QRCodeScanResult = {
        content: 'consistent-test',
        coordinates: mockCoordinates,
        confidence: 0.8
      };

      const cta1 = generator.createFromQRCode(
        qrResult,
        mockPageNumber,
        'Test',
        mockUserId,
        mockDocumentId
      );

      const cta2 = generator.createFromQRCode(
        qrResult,
        mockPageNumber,
        'Test',
        mockUserId,
        mockDocumentId
      );

      expect(cta1.id).toBe(cta2.id);
    });

    it('should generate different IDs for different QR content', () => {
      const qrResult1: QRCodeScanResult = {
        content: 'content1',
        coordinates: mockCoordinates,
        confidence: 0.8
      };

      const qrResult2: QRCodeScanResult = {
        content: 'content2',
        coordinates: mockCoordinates,
        confidence: 0.8
      };

      const cta1 = generator.createFromQRCode(
        qrResult1,
        mockPageNumber,
        'Test',
        mockUserId,
        mockDocumentId
      );

      const cta2 = generator.createFromQRCode(
        qrResult2,
        mockPageNumber,
        'Test',
        mockUserId,
        mockDocumentId
      );

      expect(cta1.id).not.toBe(cta2.id);
    });
  });

  describe('createMultipleFromQRCodes', () => {
    const mockCoordinates1: RectangleCoordinates = { x: 100, y: 200, width: 50, height: 50 };
    const mockCoordinates2: RectangleCoordinates = { x: 300, y: 400, width: 60, height: 60 };

    const mockQRResults: QRCodeScanResult[] = [
      { content: 'https://example1.com', coordinates: mockCoordinates1, confidence: 0.9 },
      { content: 'product456', coordinates: mockCoordinates2, confidence: 0.8 }
    ];

    const mockHeadings: PageHeading[] = [
      {
        text: 'First Section',
        level: 1,
        coordinates: { x: 90, y: 190, width: 100, height: 20 },
        fontSize: 18,
        fontWeight: 'bold'
      },
      {
        text: 'Second Section',
        level: 2,
        coordinates: { x: 290, y: 390, width: 120, height: 16 },
        fontSize: 14,
        fontWeight: 'bold'
      }
    ];

    const mockFindBestHeading = jest.fn();

    beforeEach(() => {
      mockFindBestHeading.mockClear();
    });

    it('should create multiple CTAs from QR results', () => {
      mockFindBestHeading
        .mockReturnValueOnce('First Section')
        .mockReturnValueOnce('Second Section');

      const ctas = generator.createMultipleFromQRCodes(
        mockQRResults,
        mockPageNumber,
        mockHeadings,
        mockUserId,
        mockDocumentId,
        mockFindBestHeading
      );

      expect(ctas).toHaveLength(2);
      expect(ctas[0].url).toBe('https://example1.com');
      expect(ctas[0].label).toBe('First Section');
      expect(ctas[1].url).toBe('http://test.com?qr=product456');
      expect(ctas[1].label).toBe('Second Section');
      
      expect(mockFindBestHeading).toHaveBeenCalledTimes(2);
      expect(mockFindBestHeading).toHaveBeenCalledWith(mockHeadings, mockCoordinates1);
      expect(mockFindBestHeading).toHaveBeenCalledWith(mockHeadings, mockCoordinates2);
    });

    it('should handle empty QR results array', () => {
      const ctas = generator.createMultipleFromQRCodes(
        [],
        mockPageNumber,
        mockHeadings,
        mockUserId,
        mockDocumentId,
        mockFindBestHeading
      );

      expect(ctas).toHaveLength(0);
      expect(mockFindBestHeading).not.toHaveBeenCalled();
    });

    it('should use fallback titles when no headings found', () => {
      mockFindBestHeading.mockReturnValue(null);

      const ctas = generator.createMultipleFromQRCodes(
        mockQRResults,
        5,
        [],
        mockUserId,
        mockDocumentId,
        mockFindBestHeading
      );

      expect(ctas).toHaveLength(2);
      expect(ctas[0].label).toBe('QR Code Link - Page 5');
      expect(ctas[1].label).toBe('QR Code Link - Page 5');
    });
  });

  describe('URL validation and generation', () => {
    const mockCoordinates: RectangleCoordinates = { x: 0, y: 0, width: 50, height: 50 };

    it('should recognize valid HTTP URLs', () => {
      const qrResult: QRCodeScanResult = {
        content: 'http://example.com',
        coordinates: mockCoordinates,
        confidence: 0.9
      };

      const cta = generator.createFromQRCode(
        qrResult,
        mockPageNumber,
        'Test',
        mockUserId,
        mockDocumentId
      );

      expect(cta.url).toBe('http://example.com');
    });

    it('should recognize valid HTTPS URLs', () => {
      const qrResult: QRCodeScanResult = {
        content: 'https://secure.example.com/path?param=value',
        coordinates: mockCoordinates,
        confidence: 0.9
      };

      const cta = generator.createFromQRCode(
        qrResult,
        mockPageNumber,
        'Test',
        mockUserId,
        mockDocumentId
      );

      expect(cta.url).toBe('https://secure.example.com/path?param=value');
    });

    it('should not recognize invalid URLs', () => {
      const invalidUrls = [
        'ftp://example.com',
        'example.com',
        'www.example.com',
        'mailto:test@example.com',
        'javascript:alert("test")'
      ];

      invalidUrls.forEach(invalidUrl => {
        const qrResult: QRCodeScanResult = {
          content: invalidUrl,
          coordinates: mockCoordinates,
          confidence: 0.8
        };

        const cta = generator.createFromQRCode(
          qrResult,
          mockPageNumber,
          'Test',
          mockUserId,
          mockDocumentId
        );

        expect(cta.url).toBe(`http://test.com?qr=${encodeURIComponent(invalidUrl)}`);
      });
    });
  });

  describe('title truncation', () => {
    const mockCoordinates: RectangleCoordinates = { x: 0, y: 0, width: 50, height: 50 };

    it('should not truncate titles within limit', () => {
      const shortTitle = 'Short Title';
      const qrResult: QRCodeScanResult = {
        content: 'test',
        coordinates: mockCoordinates,
        confidence: 0.8
      };

      const cta = generator.createFromQRCode(
        qrResult,
        mockPageNumber,
        shortTitle,
        mockUserId,
        mockDocumentId
      );

      expect(cta.label).toBe(shortTitle);
    });

    it('should truncate at word boundary when possible', () => {
      const longTitle = 'This is a very long title that should be truncated at a word boundary';
      const qrResult: QRCodeScanResult = {
        content: 'test',
        coordinates: mockCoordinates,
        confidence: 0.8
      };

      const cta = generator.createFromQRCode(
        qrResult,
        mockPageNumber,
        longTitle,
        mockUserId,
        mockDocumentId
      );

      expect(cta.label.length).toBeLessThanOrEqual(50);
      expect(cta.label).toMatch(/\w+\.\.\.$/); // Should end with word + ...
      expect(cta.label).not.toMatch(/\s\.\.\.$/);//Should not end with space + ...
    });

    it('should hard truncate when no good word boundary exists', () => {
      const longTitleNoSpaces = 'Thisisaverylongtitlewithoutanyspacesthatcannotbetruncatedatwordboundaries';
      const qrResult: QRCodeScanResult = {
        content: 'test',
        coordinates: mockCoordinates,
        confidence: 0.8
      };

      const cta = generator.createFromQRCode(
        qrResult,
        mockPageNumber,
        longTitleNoSpaces,
        mockUserId,
        mockDocumentId
      );

      expect(cta.label.length).toBe(50); // Exactly 50 chars (47 + "...")
      expect(cta.label.endsWith('...')).toBe(true);
    });

    it('should respect custom max title length', () => {
      const customGenerator = new AutoCTAGenerator({ maxTitleLength: 20 });
      const longTitle = 'This title is longer than twenty characters';
      const qrResult: QRCodeScanResult = {
        content: 'test',
        coordinates: mockCoordinates,
        confidence: 0.8
      };

      const cta = customGenerator.createFromQRCode(
        qrResult,
        mockPageNumber,
        longTitle,
        mockUserId,
        mockDocumentId
      );

      expect(cta.label.length).toBeLessThanOrEqual(20);
      expect(cta.label.endsWith('...')).toBe(true);
    });
  });

  describe('configuration management', () => {
    it('should update configuration', () => {
      const newConfig: Partial<AutoCTAConfig> = {
        baseUrl: 'https://updated.com/',
        maxTitleLength: 40
      };

      generator.updateConfig(newConfig);
      const config = generator.getConfig();

      expect(config.baseUrl).toBe('https://updated.com/');
      expect(config.maxTitleLength).toBe(40);
      expect(config.defaultTitleTemplate).toBe('QR Code Link - Page {pageNumber}'); // Should remain unchanged
    });

    it('should return copy of configuration to prevent external modification', () => {
      const config1 = generator.getConfig();
      const config2 = generator.getConfig();

      expect(config1).toEqual(config2);
      expect(config1).not.toBe(config2); // Different object references

      // Modifying returned config should not affect internal config
      config1.baseUrl = 'https://hacked.com/';
      const config3 = generator.getConfig();
      expect(config3.baseUrl).toBe('http://test.com/');
    });
  });

  describe('edge cases', () => {
    const mockCoordinates: RectangleCoordinates = { x: 0, y: 0, width: 50, height: 50 };

    it('should handle empty QR content', () => {
      const qrResult: QRCodeScanResult = {
        content: '',
        coordinates: mockCoordinates,
        confidence: 0.5
      };

      const cta = generator.createFromQRCode(
        qrResult,
        mockPageNumber,
        'Test',
        mockUserId,
        mockDocumentId
      );

      expect(cta.url).toBe('http://test.com?qr=');
      expect(cta.qrCodeContent).toBeUndefined(); // Empty content is not stored
    });

    it('should handle whitespace-only QR content', () => {
      const qrResult: QRCodeScanResult = {
        content: '   \t\n   ',
        coordinates: mockCoordinates,
        confidence: 0.5
      };

      const cta = generator.createFromQRCode(
        qrResult,
        mockPageNumber,
        'Test',
        mockUserId,
        mockDocumentId
      );

      expect(cta.url).toBe('http://test.com?qr=');
      expect(cta.qrCodeContent).toBeUndefined(); // Whitespace-only content is not stored
    });

    it('should handle very low confidence QR results', () => {
      const qrResult: QRCodeScanResult = {
        content: 'low-confidence-content',
        coordinates: mockCoordinates,
        confidence: 0.1
      };

      const cta = generator.createFromQRCode(
        qrResult,
        mockPageNumber,
        'Test',
        mockUserId,
        mockDocumentId
      );

      expect(cta.url).toBe('http://test.com?qr=low-confidence-content');
      expect(cta.isAutoGenerated).toBe(true);
    });

    it('should handle zero-dimension coordinates', () => {
      const zeroCoordinates: RectangleCoordinates = { x: 100, y: 200, width: 0, height: 0 };
      const qrResult: QRCodeScanResult = {
        content: 'test',
        coordinates: zeroCoordinates,
        confidence: 0.8
      };

      // This should throw an error due to validation in createCallToAction
      expect(() => {
        generator.createFromQRCode(
          qrResult,
          mockPageNumber,
          'Test',
          mockUserId,
          mockDocumentId
        );
      }).toThrow('Invalid call-to-action data provided');
    });
  });
});